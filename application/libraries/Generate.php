<?php
defined('BASEPATH') OR exit('No direct script access allowed');
 
class Generate extends CI_Controller {
 
    public function __construct() {
        parent::__construct();
        $this->load->library(array('ckeditor')); //library ckeditor diload
    }
 
    public function index()
    {
        //$this->create('blog');
		
		//$this->create3('blog');
		//var_dump($this->getProperties('blog'));
		//$this->create2('blog');
		
		//checking is represent that column need checking or not
		//mtml_do is more then max length do
		//ch_char is change character
		//to_char is the character that replace the changed character
		//value_as_field is the value is taken from another field. It means that column value is autogenerated
		//default_val is the default value of the column
		//enum_val is options of the value
		//dtype is datatype
		//field_name is the field name
		//column_label is the label of field in view
		$custom = array(array('name'=>'id_blog', 'checking'=>'no'), 
				array('name'=>'path', 'isnull'=>'no', 'mtml_do'=>'slice', 'max_length'=>255, 'ch_char'=>' ', 'to_char'=>'-', 'value_as_field'=>'title'),
				array('name'=>'title', 'isnull'=>'no', 'mtml_do'=>'slice', 'max_length'=>255, 'column_label'=>'Judul'),
				array('name'=>'content', 'isnull'=>'no', 'mtml_do'=>'slice', 'max_length'=>2000),
				array('name'=>'id_user', 'default_val'=>'1'),
				array('name'=>'status', 'isnull'=>'no', 'dtype'=>'enum', 'enum_val'=>array('publish', 'hidden', 'deleted'), 'field_name'=>'status'),
				array('name'=>'created_at', 'checking'=>'no'), 
				array('name'=>'publish_time', 'isnull'=>'no'), 
				array('name'=>'expired_time', 'isnull'=>'no')
				);
		$this->createController('blog', $custom);
		
		//view is an option to make a field or not
		//field_type is give a field type like text, textarea etc
		//class_field (array) add a class/classes of field
		// $custom2 = array(array('name'=>'id_blog', 'checking'=>'no', 'view'=>'no'), 
				// array('name'=>'path', 'isnull'=>'no', 'mtml_do'=>'slice', 'max_length'=>255, 'ch_char'=>' ', 'to_char'=>'-', 'value_as_field'=>'title', 'view'=>'no'),
				// array('name'=>'title', 'isnull'=>'no', 'mtml_do'=>'slice', 'max_length'=>255, 'column_label'=>'Judul', 'field_type'=>'text', 'class_field'=>array('required', 'test')),
				// array('name'=>'content', 'isnull'=>'no', 'mtml_do'=>'slice', 'max_length'=>2000),
				// array('name'=>'id_user', 'default_val'=>'1', 'view'=>'no'),
				// array('name'=>'status', 'isnull'=>'no', 'dtype'=>'enum', 'enum_val'=>array('publish', 'hidden', 'deleted'), 'field_name'=>'status', 'field_type'=>'select'),
				// array('name'=>'created_at', 'checking'=>'no', 'view'=>'no'), 
				// array('name'=>'publish_time', 'checking'=>'no'), 
				// array('name'=>'expired_time', 'checking'=>'no')
				// );
		$custom2 = array(array('name'=>'id_blog', 'checking'=>'no', 'view'=>'no'), 
				array('name'=>'path', 'isnull'=>'no', 'mtml_do'=>'slice', 'max_length'=>255, 'ch_char'=>' ', 'to_char'=>'-', 'value_as_field'=>'title', 'view'=>'no'),
				array('name'=>'title', 'isnull'=>'no', 'mtml_do'=>'slice', 'max_length'=>255, 'column_label'=>'Judul', 'field_type'=>'text', ),
				array('name'=>'content', 'isnull'=>'no', 'mtml_do'=>'slice', 'max_length'=>2000, 'column_label'=>'Konten'),
				array('name'=>'id_user', 'default_val'=>'1', 'view'=>'no'),
				array('name'=>'status', 'isnull'=>'no', 'dtype'=>'enum', 'enum_val'=>array('publish', 'hidden', 'deleted'), 'field_type'=>'select', 'column_label'=>'Status'),
				array('name'=>'created_at', 'checking'=>'no', 'view'=>'no'), 
				array('name'=>'publish_time', 'checking'=>'no', 'column_label'=>'Waktu Publish'), 
				array('name'=>'expired_time', 'checking'=>'no', 'column_label'=>'Waktu Selesai')
				);
		//$this->createView('blog', $custom2);
		// $a = array('name'=>'aaa');
		// if(empty($a['name'])){
			// echo 'empty';
		// }else{
			// echo 'no';
		// }
    }
	
	function createView($table_name, $custom){
		$colProps = $this->getProperties($table_name);
		
		echo $this->createFields($table_name, $custom);
	}
	
	function createFields($table_name, $custom){
		$Chresult = '';
		$colProps = $this->getProperties($table_name);
		foreach($colProps as $colProp){
			$colCustom = null;
			$no=1;
			foreach($custom as $customize){
				if($customize['name']==$colProp['name']){
					$colCustom = $customize;
				}
			}
			$Chresult .=  $this->createField($table_name, $colProp, $colCustom);
		}
		return $Chresult;
	}
	
	function createField($table_name, $col, $colCustom){
		$Chresult = '';
		
		$column_name = $col['name'];
		if(!empty($colCustom['field_name'])){
			$column_name = $colCustom['field_name'];
		}
		$Chresult .= '&lt;!--<b>field '.$column_name.'</b>--&gt;<br>';
		$Chresult .= "&lt;div class=\"form-group\"&gt;<br>";
		
		//checking the null value
		$isnull = '';
		if(!empty($colCustom['isnull'])){
			if($colCustom['isnull']=='no'){
				$isnull = '&lt;font color="red"&gt;*&lt;/font&gt;';
			}
		}
		
		//checking the class value
		$class_field = '';
		if(!empty($colCustom['class_field'])){
			foreach($colCustom['class_field'] as $clasf){
				$class_field .= ' '.$clasf;
			}
		}
		
		//for label
		$column_label = $col['name'];
		if(!empty($colCustom['column_label'])){
			$column_label = $colCustom['column_label'];
		}
		$Chresult .= "&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&gt;".ucfirst($column_label)." ".$isnull."&lt;/label&gt;<br>";
		
		//field type
		if(!empty($colCustom['field_type'])){
			switch($colCustom['field_type']){
				case 'text':
					$Chresult .= "&nbsp;&nbsp;&nbsp;&nbsp;
						&lt;input type=\"text\" name=\"".$column_name."\" value=\"&lt;?php if(isset(\$field".$table_name."[\"".$column_name."\"])){echo \$field".$table_name."[\"".$column_name."\"];} ?&gt;\" class=\"form-control".$class_field."\" placeholder=\"".ucfirst($column_label)." . . .\" &gt; <br>
					";
					break;
				case 'select':
					$opt = '';
					if(!empty($colCustom['enum_val'])){
						foreach($colCustom['enum_val'] as $enum_val){
							$opt .= "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;option value=\"".$enum_val."\" &lt;?php if(isset(\$field".$table_name."[\"".$column_name."\"])){if(\$field".$table_name."[\"".$column_name."\"]==\"".$enum_val."\"){echo \" selected\";}} ?&gt; &gt;".ucfirst($enum_val)."&lt;/option&gt;<br>";
						}
					}
					$Chresult .= "&nbsp;&nbsp;&nbsp;&nbsp;
						&lt;select class=\"form-control".$class_field."\" name=\"".$column_name."\"&gt;<br>
						".$opt."
						&nbsp;&nbsp;&nbsp;&nbsp;&lt;/select&gt;<br>
					";
					break;
				default :
					$Chresult .= "&nbsp;&nbsp;&nbsp;&nbsp;
						&lt;input type=\"text\" name=\"".$column_name."\" value=\"&lt;?php if(isset(\$field".$table_name."[\"".$column_name."\"])){echo \$field".$table_name."[\"".$column_name."\"];} ?&gt;\" class=\"form-control".$class_field."\" placeholder=\"".ucfirst($column_label)." . . .\" &gt; <br>
					";
					break;
				
			}
		}else{
			$Chresult .= "&nbsp;&nbsp;&nbsp;&nbsp;
						&lt;input type=\"text\" name=\"".$column_name."\" value=\"&lt;?php if(isset(\$field".$table_name."[\"".$column_name."\"])){echo \$field".$table_name."[\"".$column_name."\"];} ?&gt;\" class=\"form-control".$class_field."\" placeholder=\"".ucfirst($column_label)." . . .\" &gt; <br>
					";
		}
		
		
		
		
		//$Chresult .= "\$err".$table_name."[\"$column_name\"]=\"\";<br>";
		$Chresult.= "&nbsp;&nbsp;&nbsp;&nbsp;&lt;div style=\"color:red\"&gt;&lt;?php if(isset(\$err".$table_name."[\"".$column_name."\"])){echo \$err".$table_name."[\"".$column_name."\"];} ?&gt;&lt;/div&gt;";
		$Chresult .= "&lt;/div&gt;<br>";
		
		$Chresult.='<br><br>';
		if(!empty($colCustom['view'])){
			if($colCustom['view']=='no'){
				//$Chresult = '&lt;!--<b>'.$column_name.' no need a field</b>--&gt;<br><br>';
				$Chresult ='';
				return $Chresult;
			}else{
				return $Chresult;
			}
		}else{
			return $Chresult;
		}
	}
	
	function createController($table_name, $custom){
		$colProps = $this->getProperties($table_name);
		
		//it uses for setting/giving value when validating is returning false value
		echo '$field'.$table_name.' = array();<br>';
		//it uses for setting/giving error value
		echo '$err'.$table_name.' = array();<br>';
		echo $this->checkController($table_name, $custom);
		echo $this->savingController($table_name, $colProps, $custom);
		
	}
	
	function checkController($table_name, $custom){
		$Chresult = '';
		$colProps = $this->getProperties($table_name);
		foreach($colProps as $colProp){
			$colCustom = null;
			$no=1;
			foreach($custom as $customize){
				if($customize['name']==$colProp['name']){
					$colCustom = $customize;
					//echo $customize['name'].' '.$colProp['name'].'<br>';
					//var_dump($colCustom);
				}
				//echo '<br>'.$no++.'<br>';
			}
			//echo $colProp['name'].'xxxxx'.$colCustom['name'];
			
			$Chresult .=  $this->checkingController($table_name, $colProp, $colCustom);
		}
		return $Chresult;
	}
	
	function checkingController($table_name, $col, $colCustom){
		$Chresult = '';
		if(empty($colCustom)){
			$Chresult .="//no custom<br>";
			//var_dump($colCustom);
		}
		
		$column_name = $col['name'];
		if(!empty($colCustom['field_name'])){
			$column_name = $colCustom['field_name'];
		}
		$Chresult .= '//<b>checking the '.$column_name.'</b><br>';
		
		$Chresult .= "\$err".$table_name."[\"$column_name\"]=\"\";<br>";
		
		//set value as
		if(!empty($colCustom['value_as_field'])){
			//value as other column in field
			$Chresult .= '//uses another field value<br>$var_'.$column_name.'=$this->input->post("'.$colCustom['value_as_field'].'");<br>';
		}elseif(!empty($colCustom['default_val'])){
			//default value
			$Chresult .= '//uses default value<br>$var_'.$column_name.'='.$colCustom['default_val'].';<br>';
		}else{
			$Chresult .= '$var_'.$column_name.'=$this->input->post("'.$column_name.'");<br>';
		}
		
		
		//for label
		$column_label = $col['name'];
		if(!empty($colCustom['column_label'])){
			$column_label = $colCustom['column_label'];
		}
		
		//checking the null value
		if(!empty($colCustom['isnull'])){
			if($colCustom['isnull']=='no'){
				$Chresult .= "//check null value<br>
				if(\$var_$column_name==\"\"){<br>
				&nbsp;&nbsp;&nbsp;&nbsp;\$error=1;<br>
				&nbsp;&nbsp;&nbsp;&nbsp;\$errorMsg .= '&lt;br&gt;".ucfirst($column_label)." tidak boleh kosong!';<br>
				&nbsp;&nbsp;&nbsp;&nbsp;\$err".$table_name."[\"$column_name\"] .= \"".ucfirst($column_label)." tidak boleh kosong!\";<br>
				}
				";
			}
		}
		
		//change a char 
		if(!empty($colCustom['ch_char'])){
			if(empty($colCustom['to_char'])){
				$Chresult .= "<br>//Error, need to_char value<br>";
			}else{
				$Chresult .= "<br>//change a char<br>
					\$var_$column_name = str_replace(\" \",\"-\", \$var_$column_name);
				";
			}
		}
		
		//slice the string
		if(!empty($colCustom['mtml_do'])){
			if($colCustom['mtml_do']=='slice'){
				if(empty($colCustom['max_length'])){
					$Chresult .= "<br>//Error, need max_length value<br>";
				}else{
					$Chresult .= "<br>//slice the value<br>
						\$var_$column_name = substring(\$var_$column_name,0,".$colCustom['max_length'].");
					";
				}
			}
		}
		
		//slice the string
		if(!empty($colCustom['max_length'])){
			$Chresult .= "<br>//check max length value<br>
				if(strlen(\$var_$column_name)>".$colCustom['max_length']."){<br>
				&nbsp;&nbsp;&nbsp;&nbsp;\$error=1;<br>
				&nbsp;&nbsp;&nbsp;&nbsp;\$errorMsg .= '&lt;br&gt;".ucfirst($column_label)." melebihi batas maksimal ".$colCustom['max_length']." karakter!';<br>
				&nbsp;&nbsp;&nbsp;&nbsp;\$err".$table_name."[\"$column_name\"] .= \"&lt;br&gt;".ucfirst($column_label)." melebihi batas maksimal ".$colCustom['max_length']." karakter!\";<br>
				}
				";
		}
		
		//check enum options val
		if(!empty($colCustom['enum_val'])){
			$enum_values = '';
			$numb=0;
			foreach($colCustom['enum_val'] as $enum_value){
				$and_val = ' && ';
				$numb++;
				if((count($colCustom['enum_val'])-$numb)==0){
					$and_val = '';
				}
				$enum_values .= '$var_'.$column_name.' != "'.$enum_value.'"'.$and_val;
			}
			
			$Chresult .= "<br>//check enum options val<br>
				if($enum_values){<br>
				&nbsp;&nbsp;&nbsp;&nbsp;\$error=1;<br>
				&nbsp;&nbsp;&nbsp;&nbsp;\$errorMsg .= '&lt;br&gt; pilihan ".ucfirst($column_label)." tidak ada atau tidak diizinkan!';<br>
				&nbsp;&nbsp;&nbsp;&nbsp;\$err".$table_name."[\"$column_name\"] .= \"&lt;br&gt; pilihan ".ucfirst($column_label)." tidak ada atau tidak diizinkan!\";<br>
				}
				";
		}
		
		$Chresult .= "<br>\$field".$table_name."[\"$column_name\"]=\$var_$column_name;";
		
		
		$Chresult.='<br><br>';
		if(!empty($colCustom['checking'])){
			if($colCustom['checking']=='no'){
				$Chresult = '//<b>'.$column_name.' no need checking</b><br><br>';
				return $Chresult;
			}else{
				return $Chresult;
			}
		}else{
			return $Chresult;
		}
	}
	
	function savingController($table_name, $colProps, $custom){
		$Chresult = '$data = array(<br>';
		foreach($colProps as $colProp){
			$colCustom = null;
			foreach($custom as $customize){
				$colCustom = $customize;
				if($customize['name']==$colProp['name']){
					if(!empty($colCustom['checking'])){
						if($colCustom['checking'] !='no'){
							$Chresult .= "&nbsp;&nbsp;&nbsp;&nbsp;'".$colProp['name']."' => ";
							if(!empty($colCustom['field_name'])){
								$column_name = $colCustom['field_name'];
								$Chresult .= "\$val_".$column_name.",<br>";
							}else{
								$Chresult .= "\$val_".$customize['name'].",<br>";
							}
						}
					}else{
						$Chresult .= "&nbsp;&nbsp;&nbsp;&nbsp;'".$colProp['name']."' => ";
						if(!empty($colCustom['field_name'])){
							$column_name = $colCustom['field_name'];
							$Chresult .= "\$var_".$column_name.",<br>";
						}else{
							$Chresult .= "\$var_".$customize['name'].",<br>";
						}
						
					}
				}
			}
		}
		$Chresult .= ');<br><br>';
		$Chresult .= '$this->'.$table_name.'_model->insert_'.$table_name.'($data);<br>';
		$Chresult .= 'redirect('.$table_name.');<br>';
		return $Chresult;
	}
	
	public function getProperties($table_name){
		$this->load->model('GenerateModel');
		$fields=$this->GenerateModel->allColumn($table_name)->field_data();
		$columnsProp = array();
		foreach ($fields as $field)
		{
			$Prop=array();
			$Prop['name'] = $field->name;
			$Prop['data_type'] = $this->dataTypeMapping($field->type);
			$Prop['primary_key']=$this->isPrimaryKey($field->primary_key);
			
			array_push($columnsProp, $Prop);
		}
		return $columnsProp;
	}
	
	public function dataTypeMapping($hash){
		$mysql_data_type_hash = array(
			0=>'decimal',
			1=>'tinyint',
			2=>'smallint',
			3=>'int',
			4=>'float',
			5=>'double',
			7=>'timestamp',
			8=>'bigint',
			9=>'mediumint',
			10=>'date',
			11=>'time',
			12=>'datetime',
			13=>'year',
			16=>'bit',
			//252 is currently mapped to all text and blob types (MySQL 5.0.51a)
			252=>'varchar',
			253=>'varchar',
			254=>'char',
			246=>'decimal',
			247=>'enum'
		);
		return $mysql_data_type_hash[$hash];
	}
	
	function isPrimaryKey($hash){
		if($hash==2){
			return true;
		}else{
			return false;
		}
	}
	
	public function create($table_name){
		$this->load->model('GenerateModel');
		//var_dump($table_name);
		$fields=$this->GenerateModel->allColumn($table_name)->list_fields();
		
		//$fields = $this->db->field_data($table_name);

		foreach ($fields as $field)
		{
		   echo $field.'<br>';
		}
	}
	
	public function create2($table_name){
		$this->load->model('GenerateModel');
		$fields=$this->GenerateModel->allColumn($table_name)->field_data();
		//var_dump($fields);
		foreach ($fields as $field)
		{
		   echo $field->name.' ';
		   echo $this->dataTypeMapping($field->type).' ';
		   echo $field->primary_key.' ';
		   echo '<br>';
		}
	}
	
	
	
	public static function h_type2txt($type_id)
{
    static $types;

    if (!isset($types))
    {
        $types = array();
        $constants = get_defined_constants(true);
        foreach ($constants['mysqli'] as $c => $n) if (preg_match('/^MYSQLI_TYPE_(.*)/', $c, $m)) $types[$n] = $m[1];
    }

    return array_key_exists($type_id, $types)? $types[$type_id] : NULL;
}

public static function h_flags2txt($flags_num)
{
    static $flags;

    if (!isset($flags))
    {
        $flags = array();
        $constants = get_defined_constants(true);
        foreach ($constants['mysqli'] as $c => $n) if (preg_match('/MYSQLI_(.*)_FLAG$/', $c, $m)) if (!array_key_exists($n, $flags)) $flags[$n] = $m[1];
    }

    $result = array();
    foreach ($flags as $n => $t) if ($flags_num & $n) $result[] = $t;
    return implode(' ', $result);
}

	public function create3($table_name){
		$this->load->model('GenerateModel');
		//var_dump($table_name);
		$fields=$this->GenerateModel->columnType($table_name);
		var_dump($fields);
		//$fields = $this->db->field_data($table_name);

		foreach ($fields as $field)
		{
		   echo $field->COLUMN_NAME.' ';
		   
		   echo '<br>';
		}
	}
 
    function editor($width,$height) {
    //configure base path of ckeditor folder
    $this->ckeditor->basePath = 'plugins/ckeditor/';
    $this->ckeditor-> config['toolbar'] = 'Full';
    $this->ckeditor->config['language'] = 'en';
    $this->ckeditor-> config['width'] = $width;
    $this->ckeditor-> config['height'] = $height;
  }
  function add(){
	  echo $this->input->post('deskripsi');
  }
}